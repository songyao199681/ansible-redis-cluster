- name: yum Install dependencies (first node only)
  yum:
    name: "{{ item }}"
  loop:
    - gcc
    - make
    - jemalloc-devel
    - systemd-devel
  when: inventory_hostname == "redis-1"

- name: create group {{ group }}
  group:
    name: "{{ group }}"
    gid: "{{ gid }}"

- name: create user {{ user }}
  user:
    name: "{{ user }}"
    uid: "{{ uid }}"
    group: "{{ group }}"
    system: yes
    shell: /sbin/nologin

- name: Create Redis data and log directories 
  file:
    path: "{{ item }}"
    state: directory
  loop: 
    - "{{ redis_data_dir }}"
    - "{{ redis_log_dir }}"

- name: Create {{ redis_data_dir }} directories for each instance
  file:
    path: "{{ redis_data_dir }}redis-{{ item }}"
    state: directory
  loop: "{{ range(1, redis_instances_per_host + 1) | list }}"

- name: Create {{ redis_log_dir }} directories for each instance
  file:
    path: "{{ redis_log_dir }}redis-{{ item }}"
    state: directory
  loop: "{{ range(1, redis_instances_per_host + 1) | list }}"

- name: Download Redis source from URL (only on redis-1)
  get_url:
    url: "http://download.redis.io/releases/redis-{{ redis_version }}.tar.gz"
    dest: "{{ redis_src_dir }}redis-{{ redis_version }}.tar.gz"
    mode: '0644'
  register: download_redis
  ignore_errors: yes
  when: inventory_hostname == "redis-1"

- name: Ensure Redis source is available (either downloaded or local)
  unarchive:
    src: "{{ redis_src_dir }}redis-{{ redis_version }}.tar.gz"
    dest: "{{ redis_src_dir }}"
    remote_src: "yes"
    creates: "{{ redis_src_dir }}redis-{{ redis_version }}"
  when:
    - inventory_hostname == "redis-1"
    - (download_redis is not defined) or (not download_redis.failed)

- name: Compile  install redis-{{ redis_version }}  on first node
  shell:
    chdir: "{{ redis_src_dir }}redis-{{ redis_version }}"
    cmd: "make -j {{ (ansible_processor_vcpus / 2) | int }}  USE_SYSTEMD=yes PREFIX={{ redis_base_dir }} install"
    creates: "{{ redis_base_dir }}"
  when: inventory_hostname == "redis-1" 

- name: Copy Redis installation to other nodes from redis-1
  synchronize:
    src: "{{ redis_base_dir }}"
    dest: "{{ redis_base_dir }}"
    recursive: yes
  delegate_to: redis-1
  when: inventory_hostname != "redis-1"

- name: Create an etc directory for storing redis.conf
  file:
    path: "{{ redis_base_dir }}etc/redis-{{ item }}"
    state: directory
    mode: '0755'
  loop: "{{ range(1, redis_instances_per_host + 1) | list }}"

- name: Copy the compiled redis.conf file to etc
  template:
    src: redis.conf.j2
    dest: "{{ redis_base_dir }}etc/redis-{{ item }}/redis.conf"
  loop: "{{ range(1, redis_instances_per_host + 1) | list }}"
  tags: redis_conf
  notify:
    - restart-redis

- name: Ensure correct ownership and permissions for redis base and data directories
  file:
    path: "{{ item }}"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: '0755'
    recurse: yes
  loop:
    - "{{ redis_base_dir }}"
    - "{{ redis_data_dir }}"
    - "{{ redis_log_dir }}"

- name: copy redis.service
  template:
    src: redis.service.j2
    dest: /lib/systemd/system/redis-server-{{ item }}.service
  loop: "{{ range(1, redis_instances_per_host + 1) | list }}"
  notify:
    - restart-redis

- name: redis PATH variable
  copy:
    content: 'PATH={{ redis_base_dir }}/redis/bin:$PATH'
    dest: /etc/profile.d/redis.sh

- name: Chanage net.core.somaxconn
  sysctl:
    name: net.core.somaxconn
    value: '1024'
    sysctl_set: yes
    state: present

- name: vm.overcommit_memory
  sysctl:
    name: vm.overcommit_memory
    value: '1'
    sysctl_set: yes
    state: present

- name: Check transparent_hugepage enabled status
  command: "cat /sys/kernel/mm/transparent_hugepage/enabled"
  register: hugepage_enabled_status
  become: yes

- name: Check transparent_hugepage defrag status
  command: "cat /sys/kernel/mm/transparent_hugepage/defrag"
  register: hugepage_defrag_status
  become: yes

- name: Disable transparent_hugepage at runtime
  shell: "echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag"
  become: yes
  when: "'[always]' in hugepage_enabled_status.stdout or '[always]' in hugepage_defrag_status.stdout"


- name: Persist transparent_hugepage settings across reboots
  lineinfile:
    path: /etc/rc.local
    state: present
    line: "{{ item }}"
    create: yes
    mode: '0755'
  loop:
    - 'echo never > /sys/kernel/mm/transparent_hugepage/enabled'
    - 'echo never > /sys/kernel/mm/transparent_hugepage/defrag'

- name: Ensure rc.local is executable
  file:
    path: /etc/rc.d/rc.local
    mode: '0755'
    state: file

- name: Gather Redis Hosts
  set_fact:
    redis_hosts: "{{ groups['redis_hosts'] | map('extract', hostvars, ['ansible_host']) | list }}"

- name: Display Redis cluster initialization command
  debug:
    msg: 
      - "i will use this command to init the cluster: "
      -  "{{ redis_base_dir }}bin/redis-cli --cluster create {{ redis_hosts | product(range(redis_base_port, redis_base_port + redis_instances_per_host)) | map('join', ':') | join(' ') }} --cluster-replicas 1 -a {{ redis_password }} --cluster-yes delegate_to: {{ redis_hosts[0] }}"
  run_once: true

- name: Confirm Initialization
  pause:
    prompt: "Redis cluster configuration complete. Do you want to initialize the cluster now? (y/n)"
  register: init_confirmation

- name: Initialize Redis Cluster
  command: "{{ redis_base_dir }}bin/redis-cli --cluster create {{ redis_hosts | product(range(redis_base_port, redis_base_port + redis_instances_per_host)) | map('join', ':') | join(' ') }} --cluster-replicas 1 -a {{ redis_password }} --cluster-yes delegate_to: {{ redis_hosts[0] }}"
  when: init_confirmation.user_input == 'y' or init_confirmation.user_input == 'yes'
  run_once: true

- name: Check Redis cluster status
  command: "{{ redis_base_dir }}bin/redis-cli --cluster check {{ redis_hosts[0] }}:{{ redis_base_port }} -a {{ redis_password }}"
  register: cluster_check_output
  changed_when: false
  run_once: true
  ignore_errors: yes

- name: Display Redis cluster status
  debug:
    var: cluster_check_output.stdout
  run_once: true

- name: Fail if Redis cluster is not healthy
  fail:
    msg: "Redis cluster is not healthy. Please check the cluster configuration."
  when: "'[ERR] Not all 16384 slots are covered by nodes.' in cluster_check_output.stdout"
  run_once: true
